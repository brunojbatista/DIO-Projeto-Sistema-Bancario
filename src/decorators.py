from __future__ import annotations

from datetime import datetime
from functools import wraps
from typing import Callable, Any
import logging

def transaction_logger(func: Callable) -> Callable:
    """
    Decorador que registra a data e hora de cada transa√ß√£o banc√°ria.
    
    Args:
        func (Callable): Fun√ß√£o a ser decorada (m√©todo execute das transa√ß√µes)
        
    Returns:
        Callable: Fun√ß√£o decorada com logging de transa√ß√£o
    """
    @wraps(func)
    def wrapper(*args, **kwargs) -> Any:
        # Obt√©m a inst√¢ncia da transa√ß√£o (primeiro argumento ap√≥s self)
        transaction_instance = args[0] if args else None
        
        # Registra o in√≠cio da transa√ß√£o
        start_time = datetime.now()
        transaction_type = type(transaction_instance).__name__
        
        # Armazena o timestamp na transa√ß√£o para uso posterior
        transaction_instance._timestamp = start_time
        
        print(f"\n{'='*60}")
        print(f"üïê IN√çCIO DA TRANSA√á√ÉO: {transaction_type}")
        print(f"üìÖ Data/Hora: {start_time.strftime('%d/%m/%Y √†s %H:%M:%S')}")
        print(f"üí∞ Valor: R$ {transaction_instance.value if hasattr(transaction_instance, 'value') else 'N/A'}")
        
        if hasattr(transaction_instance, 'account'):
            print(f"üè¶ Conta: {transaction_instance.account.account_number}")
            print(f"üë§ Cliente: {transaction_instance.account.client.name}")
        
        # Para transfer√™ncias, mostra informa√ß√µes da conta de destino
        if hasattr(transaction_instance, 'destination_account'):
            print(f"üéØ Conta Destino: {transaction_instance.destination_account.account_number}")
            print(f"üë§ Cliente Destino: {transaction_instance.destination_account.client.name}")
        
        print(f"{'='*60}")
        
        try:
            # Executa a transa√ß√£o
            result = func(*args, **kwargs)
            
            # Registra o sucesso da transa√ß√£o
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\n{'='*60}")
            print(f"‚úÖ TRANSA√á√ÉO CONCLU√çDA: {transaction_type}")
            print(f"üìÖ Data/Hora: {end_time.strftime('%d/%m/%Y √†s %H:%M:%S')}")
            print(f"‚è±Ô∏è  Dura√ß√£o: {duration.total_seconds():.2f} segundos")
            print(f"üéØ Status: {'Sucesso' if result else 'Falha'}")
            print(f"{'='*60}\n")
            
            return result
            
        except Exception as e:
            # Registra o erro da transa√ß√£o
            end_time = datetime.now()
            duration = end_time - start_time
            
            print(f"\n{'='*60}")
            print(f"‚ùå ERRO NA TRANSA√á√ÉO: {transaction_type}")
            print(f"üìÖ Data/Hora: {end_time.strftime('%d/%m/%Y √†s %H:%M:%S')}")
            print(f"‚è±Ô∏è  Dura√ß√£o: {duration.total_seconds():.2f} segundos")
            print(f"üö® Erro: {str(e)}")
            print(f"{'='*60}\n")
            
            # Re-lan√ßa a exce√ß√£o para manter o comportamento original
            raise
    
    return wrapper

def transaction_timestamp(func: Callable) -> Callable:
    """
    Decorador simples que apenas adiciona timestamp √† transa√ß√£o.
    
    Args:
        func (Callable): Fun√ß√£o a ser decorada
        
    Returns:
        Callable: Fun√ß√£o decorada com timestamp
    """
    @wraps(func)
    def wrapper(*args, **kwargs) -> Any:
        # Adiciona timestamp √† inst√¢ncia da transa√ß√£o
        transaction_instance = args[0] if args else None
        if transaction_instance:
            transaction_instance._timestamp = datetime.now()
        
        return func(*args, **kwargs)
    
    return wrapper
